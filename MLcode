import cv2
import numpy as np
import glob
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# ---------------- Feature Extraction ----------------
def extract_features_from_contour(cnt, hsv):
    area = cv2.contourArea(cnt)
    perimeter = cv2.arcLength(cnt, True)
    circularity, aspect_ratio = 0, 0
    if perimeter != 0:
        circularity = 4*np.pi*(area/(perimeter**2))
    x, y, w, h = cv2.boundingRect(cnt)
    aspect_ratio = float(w)/h if h != 0 else 0
    mask = np.zeros(hsv.shape[:2], np.uint8)
    cv2.drawContours(mask, [cnt], -1, 255, -1)
    mean_intensity = cv2.mean(hsv, mask=mask)[2]  # V channel
    mean_hue = cv2.mean(hsv, mask=mask)[0]        # H channel
    return [mean_intensity, mean_hue, circularity, aspect_ratio]

# ---------------- Build Dataset ----------------
def build_dataset():
    X, y = [], []
    for label, folder in enumerate(["plastics", "organics"]):
        for path in glob.glob(f"{folder}/*.jpg"):
            img = cv2.imread(path)
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
            _, thresh = cv2.threshold(hsv[:,:,2], 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
            contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            for cnt in contours:
                feats = extract_features_from_contour(cnt, hsv)
                X.append(feats)
                y.append(label)
    return np.array(X), np.array(y)

# ---------------- Train & Save Model ----------------
def train_and_save_model():
    X, y = build_dataset()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    clf = RandomForestClassifier(n_estimators=100)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(classification_report(y_test, y_pred))
    joblib.dump(clf, "plastic_model.pkl")
    print(" Model trained and saved as plastic_model.pkl")

# ---------------- Load Model ----------------
def load_model():
    return joblib.load("plastic_model.pkl")

# ---------------- Concentration Estimation ----------------
def estimate_concentration(image_path, model,
                           sample_volume_liters,
                           filter_area_mm2,
                           fov_area_mm2,
                           num_images_taken):
    img = cv2.imread(image_path)
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    _, thresh = cv2.threshold(hsv[:,:,2], 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    plastic_count = 0
    for cnt in contours:
        feats = extract_features_from_contour(cnt, hsv)
        pred = model.predict([feats])[0]
        if pred == 0:  # 0 = plastic
            plastic_count += 1

    total_count = len(contours)
    ratio = plastic_count / max(1, total_count)

    # Scale up to full filter â†’ per liter
    particles_per_filter = (plastic_count / num_images_taken) * (filter_area_mm2 / fov_area_mm2)
    particles_per_liter = particles_per_filter / sample_volume_liters

    return {
        "plastic_count_in_image": plastic_count,
        "total_particles_in_image": total_count,
        "plastic_ratio_in_image": ratio,
        "estimated_particles_per_liter": particles_per_liter
    }

